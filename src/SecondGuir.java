import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class SecondGuir extends JFrame {
    private JPanel contentPane;
    private JTextField question;
    private JTextField answerVariant;
    private JSpinner numOfVar;
    private JButton deleteOption;
    private JLabel numVarLabel;
    private JButton nextQuestion;
    private JLabel questLabel;
    private JLabel optOfAns;
    private JTextField trueAnswer;
    private JLabel trueAnswerLabel;
    private JLabel qLeft;
    private JLabel qLeftNumber;
    private JLabel trueAnswerLabelNum;
    private JLabel optOfAnsValue;

    public ArrayList<Variant> vars;
    private int pos = 1;
    private final String filler = "filler";
    private ArrayList<String>[] arr = new ArrayList[]{new ArrayList<String>()};

    {
        arr[0].add(filler);
    }

    private ArrayList<Question> questions = new ArrayList<>();

    private static ArrayList<Variant> createVariants(ArrayList<Question> vars) {
        ArrayList<Variant> result = new ArrayList<>();
        for (int i = 0; i < FirstGuir.oO; i++) {
            ArrayList<Question> quests = new ArrayList<>();
            for (int j = 0; j < FirstGuir.qPO; j++) {
                int x;
                x = (int) (Math.random() * (FirstGuir.oI));
                System.out.println(x);
                if ((x * i) + j == vars.size()) x--;
                vars.get((x * i) + j).shuffleList();//works
                if (!quests.contains(vars.get((x * i) + j)))
                    quests.add(vars.get((x * FirstGuir.qPO) + j));
                else {
                    j--;
                }
            }
            result.add(new Variant(quests));
        }
        return result;
    }

    public SecondGuir() {
        setContentPane(contentPane);
        qLeftNumber.setText(String.valueOf(FirstGuir.qPO * FirstGuir.oI));


        JSpinner.DefaultEditor editor = (JSpinner.DefaultEditor) numOfVar.getEditor();
        editor.getTextField().setEditable(false);
        numOfVar.setEditor(editor);
        SpinnerNumberModel model = new SpinnerNumberModel(1, 1, Integer.MAX_VALUE, 1);
        numOfVar.setModel(model);
        optOfAnsValue.setText(String.valueOf(numOfVar.getValue()));

        deleteOption.addActionListener(e -> {
            arr[0].remove(pos - 1);
            try {
                pos--;
                numOfVar.setValue(numOfVar.getPreviousValue());
            } catch (IllegalArgumentException ex) {
                ex.printStackTrace();
            }
        });

        nextQuestion.addActionListener(e -> {
            questions.add(new Question(question.getText(), arr[0], trueAnswer.getText()));
            question.setText("");
            arr[0].clear();
            trueAnswer.setText("");
        });

        answerVariant.addCaretListener(e -> {
            if (!answerVariant.getText().equals("")) arr[0].set(pos - 1, answerVariant.getText());
        });
        numOfVar.addChangeListener(e -> {
            String str = answerVariant.getText();
            if ((int) numOfVar.getValue() > pos) {
                if (pos != arr[0].size()) {
                    arr[0].set(pos+1, str);
                    answerVariant.setText("");
                    pos++;
                } else {
                    arr[0].add(filler);
                    pos++;
                    answerVariant.setText("");
                }
            } else if ((int) numOfVar.getValue() < pos) {
                arr[0].set(pos - 1, str);
                pos--;
                answerVariant.setText(arr[0].get(pos - 1));
            }
            System.out.println(arr[0]);
            optOfAnsValue.setText(String.valueOf(numOfVar.getValue()));
        });
    }

    public static void main(String[] args) {
        SecondGuir dialog = new SecondGuir();
        dialog.pack();
        dialog.setName("Шаг 2: ввод вопросов");
//        dialog.setExtendedState(Frame.MAXIMIZED_BOTH);
        dialog.setVisible(true);
        dialog.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 3, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-6874567));
        contentPane.setForeground(new Color(-10195269));
        question = new JTextField();
        question.setText("");
        contentPane.add(question, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-6874567));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), null, 0, false));
        answerVariant = new JTextField();
        panel1.add(answerVariant, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), null, 0, false));
        optOfAns = new JLabel();
        optOfAns.setForeground(new Color(-10195269));
        optOfAns.setText("Вариант ответа №");
        panel1.add(optOfAns, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        trueAnswer = new JTextField();
        panel1.add(trueAnswer, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), null, 0, false));
        trueAnswerLabel = new JLabel();
        trueAnswerLabel.setForeground(new Color(-10195269));
        trueAnswerLabel.setText("Введите правильный вариант ответа");
        panel1.add(trueAnswerLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 4, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        trueAnswerLabelNum = new JLabel();
        trueAnswerLabelNum.setForeground(new Color(-6874567));
        trueAnswerLabelNum.setText("1");
        panel1.add(trueAnswerLabelNum, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        optOfAnsValue = new JLabel();
        optOfAnsValue.setForeground(new Color(-10195269));
        optOfAnsValue.setText("1");
        panel1.add(optOfAnsValue, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        numOfVar = new JSpinner();
        contentPane.add(numOfVar, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_SOUTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, 50), new Dimension(300, -1), 0, false));
        deleteOption = new JButton();
        deleteOption.setText("Удалить");
        contentPane.add(deleteOption, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 100), new Dimension(100, 100), 0, false));
        numVarLabel = new JLabel();
        numVarLabel.setForeground(new Color(-10195269));
        numVarLabel.setText("Переход между вариантами ответа");
        contentPane.add(numVarLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nextQuestion = new JButton();
        nextQuestion.setText("Далее");
        contentPane.add(nextQuestion, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 100), new Dimension(100, 100), 0, false));
        questLabel = new JLabel();
        questLabel.setForeground(new Color(-10195269));
        questLabel.setText("Введите вопрос");
        contentPane.add(questLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        qLeft = new JLabel();
        qLeft.setForeground(new Color(-10195269));
        qLeft.setText("Осталось вопросов:");
        contentPane.add(qLeft, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        qLeftNumber = new JLabel();
        qLeftNumber.setForeground(new Color(-10195269));
        qLeftNumber.setText("12");
        contentPane.add(qLeftNumber, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
